package org.aksw.mandolin.inference;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

import org.aksw.mandolin.controller.NameMapper;
import org.aksw.mandolin.model.PredictionSet;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.googlecode.rockit.app.solver.StandardSolver;
import com.googlecode.rockit.app.solver.pojo.Clause;
import com.googlecode.rockit.app.solver.pojo.Literal;
import com.googlecode.rockit.exception.ParseException;
import com.googlecode.rockit.exception.ReadOrWriteToFileException;
import com.googlecode.rockit.exception.SolveException;
import com.googlecode.rockit.javaAPI.Model;
import com.hp.hpl.jena.vocabulary.OWL;

/**
 * Manager for the Gibbs-Sampling inference. Ground rules can be extracted from
 * the Postgre database after being generated by ProbKB (faster) or generated
 * through standard grounding by RockIt (slower).
 * 
 * TODO missing link: AMIE rules to MLN file (now using dumb rules)!
 * 
 * @author Tommaso Soru <tsoru@informatik.uni-leipzig.de>
 *
 */
public class RockitGroundingAndGibbsSampling extends RockitGibbsSampling {

	private final static Logger logger = LogManager.getLogger(RockitGroundingAndGibbsSampling.class);
	
	/**
	 * MLN file.
	 */
	private String input;

	/**
	 * DB file.
	 */
	private String groundings;

	private Model model;

	public static void main(String[] args) throws ReadOrWriteToFileException,
			ParseException, IOException {

		// launch test
		new RockitGroundingAndGibbsSampling(new NameMapper(
				OWL.sameAs.getURI()), "eval/11_publi-mln/prog.mln",
				"eval/11_publi-mln/evidence.db").infer();

	}

	public RockitGroundingAndGibbsSampling(NameMapper map, String input,
			String groundings) throws ReadOrWriteToFileException,
			ParseException, IOException {
		super(map);

		this.input = input;
		this.groundings = groundings;

	}

	/**
	 * Call RockIt for both standard grounding and Gibbs-sampling inference.
	 */
	public PredictionSet infer() {

		PredictionSet ps = null;

		try {
			model = reader.getModel(input, groundings);

			// standard grounding...
			logger.info("Input: " + this.input);
			StandardSolver solver = new StandardSolver(model);
			// ground MLN and retrieve Clauses
			ArrayList<String> consistentStartingPoints = solver.solve();
			logger.info("+++ STARTING POINTS +++");
			for (String s : consistentStartingPoints)
				logger.info(s);
			ArrayList<Clause> clauses = solver.getAllClauses();
			logger.info("+++ CLAUSES +++");
			for (Clause c : clauses)
				logger.info(c);
			Collection<Literal> evidence = solver.getEvidenceAxioms();
			logger.info("+++ EVIDENCE +++");
			for (Literal l : evidence)
				logger.info(l);
			solver = null; // free memory

			// call Gibbs sampler
			ps = gibbsSampling(consistentStartingPoints, clauses, evidence);

		} catch (ParseException | IOException | SQLException | SolveException e) {
			e.printStackTrace();
		}

		return ps;
	}

}

# CONFIGURATION FILE FOR ROCKIT
#
# Pay attention that you do not use spaces at the end of the line (do not write "root ", but only "root")
# 
#
# Specify your data how to access your MySQL installation 
sql_username=root
sql_password=
sql_url=jdbc:mysql://127.0.0.1/
#?useCursorFetch=true&defaultFetchSize=1000
#
#
# Specify a temp folder where files are created and deleted during runtime.
temp_path=temp/
#
# Here you can set the name of the database that will be used. 
# All data in this database will be deleted
sql_database=rockit
#
# ==================================================================
# PARAMETERS 
# ==================================================================
# The standard setting is usually optimal. If your problem is too complex, you might want to increase the gurobi_tollerance parameter.
#
# ------------------------------------------------------------------
# Maximum a-posteriori inference with ILP
# ------------------------------------------------------------------
#
# Sets the gap of the Gurobi solver. This gives exacter (value around 0.000001) or 
# more approximative (value 0.01) solutions.
# If the gap is set to -1, the standard Gurobi gap is used.
# HINT: If your problem does not terminate, then increase this value (take for instance 0.01)
gap=-1
# gap=0.01
# gap=0.001
#...
# gap=0.000001
#
# Enables cutting-plane inference (do not add all constraints at once but add them step by step)
# Reference: http://arxiv.org/abs/1206.3282
# Advantage: Problems are much smaller, thus much faster to solve
# Disadvantage: More than one problem has to be solved (but usually the overall time is still smaller)
# use_cutting_plane_inference=true
use_cutting_plane_inference=true
#
# If activated, variables will be aggregated. 
# Reference: https://rockit.googlecode.com/files/rockit.pdf
# Advantage: Less formulas in ILP, ILP runs faster.
# Disadvantage: Maybe a slightly slower Java Code (but usually the overall time is faster when activated)
# use_cutting_plane_aggregation=true
use_cutting_plane_aggregation=true
#
# Number of threads (integer). Determines the number of threads created for SQL processing. 
# If value is -1 then the number of threads is your number of CPUs + 1.
number_of_threads=4
#
#
#Time limit in seconds. Limits the total time expended for the gurobi solver (in seconds). 
#Note that this only limits the time of the gurobi solver. Since there can be multiple calls of the gurobi solver, the overall runtime 
#is usually larger.
#If -1 is set, time limit is infinitive.
time_limit=-1
#
#
# ------------------------------------------------------------------
# Marginal inference using Gibbs sampling in combination with symmetry detection
# ------------------------------------------------------------------
#
# Leverage Symmetries:
# Reference: http://arxiv.org/abs/1304.2694
# Advantage: The resulting marginal probabilities are of a higher quality since all their symmetries 
# are leveraged. This usually leads to a significant better result in fewer samples (proven).
# Disadvantage: Minimal longer runtime and needs to run saucy in the background (not possible for ios apple machines)
use_symmetries_in_marginal_inference=false
#
# ------------------------------------------------------------------
# General Parameters
# ------------------------------------------------------------------
#
#
# Enables larger (debug) output. Additionally, it prints the ilp into the file "model.lp" before solving. 
# Important: Set this to false for runtime evaluations.
# debug_output=false
debug_output=true
#
# Simplifies formulas with negatives weights like it is done in Tuffy.
# Example:
# -2  student(a1) v !advisedBy(a2,a1) v !advisedBy(a1,a2)
# -->
# 2  student(a1) n advisedBy(a2,a1) n advisedBy(a1,a2)
# -->
# 1   student(a1) v advisedBy(a1,a2)
# 1	  student(a1) v advisedBy(a2,a1)
# 
# The formulars with negative weights are changed so that:
# - Their weight is multiplied with -1 (made positive).
# - Each non-negated hidden predicate (in the restriction part) is set to its negation .
# - Each negated hidden predicate (in the restriction part) is set to be not negated.
# - Formular becomes a conjunction 
#
# The formulas with conjunction are changed in a way that:
# - The weight is divided by the number of hidden predicates.
# - For each predicate a new formula is created.
#	 
# If deactivated, negative weights and conjunctions are left as such (no changes are made)
simplify_negative_weight_and_conjunction=false
#simplify_negative_weight_and_conjunction=false
#
# changes handling of String variables
# converts string values to extra observed predicates if they occur in positive predicates.
# advise: Leave this value as it is
convert_string_values=true
#
# Select ILP solver:
# GUROBI, CPLEX, SCIP
# default: GUROBI
ilp_solver=GUROBI
#
scip=
# it was C:\\scip-3.1.0.exe
# aggregator.properties
# Copyright (C) 2008 Sofus A. Macskassy
#
# Part of the open-source Network Learning Toolkit
# http://netkit-srl.sourceforge.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id$
#
# ================================================================================
#
# Aggregator functions.
#
# Add your new aggregators in this file.
#
# Each aggregator must have two lines:
#     <name>.class=[fully specified class-name]
#     <name>.accept=[attributes, comma-delimited, no spaces]
# You can have multiple aggregators with the same class as long as
# they have different names.
#
# Implementation:
# These must implement the netkit.classifiers.aggregators.Aggregator interface
# (or the netkit.classifiers.aggregators.AggregatorByValue interface)
# They can optionally also implement Configurable.
# They must have a default public constructor.
#
# Required configuration parameters:
# They _must_ each define which type of attributes they will aggregate
# over.   Valid types are:
#    CATEGORICAL, DISCRETE, CONTINUOUS
# These must be given in the 'accept' parameter, comma-delimited with no spaces.
#
#

# ==============================
# COUNT(Attribute, Value)
# ==============================
# This is a by-value aggregation.   It aggregates a categorical/discrete attribute, and a specific
# value (e.g., "how many entities in the neighborhood have the value 'blue' in the eye-color attribute)
# it performs a weighted count when there is uncertainty (much like the weighted-vote RN)
count.class=netkit.classifiers.aggregators.Count
count.accept=CATEGORICAL,DISCRETE

# ==============================
# EXIST(Attribute, Value)
# ==============================
# This is a by-value aggregation.   It aggregates a categorical/discrete attribute, and a specific
# value (e.g., "does there exist an entity in the neighborhood which has the value 'blue' in the
# eye-color attribute)
# when there is uncertainty, then it returns true if there is any possibility of seeing that value
exist.class=netkit.classifiers.aggregators.Exist
exist.accept=CATEGORICAL,DISCRETE

# ==============================
# MAX(Attribute)
# ==============================
# This aggregator returns the maximum of the attribute-values, for a given attribute, seen in
# the neighborhood (e.g., the maximum weight among entities in the neighborhood)
max.class=netkit.classifiers.aggregators.Max
max.accept=CONTINUOUS,DISCRETE

# ==============================
# MEAN(Attribute)
# ==============================
# This aggregator returns the minimum of the attribute-values, for a given attribute, seen in
# the neighborhood (e.g., the minimum weight among entities in the neighborhood)
mean.class=netkit.classifiers.aggregators.Mean
mean.accept=CONTINUOUS,DISCRETE

# ==============================
# MIN(Attribute)
# ==============================
# This aggregator returns the average of the attribute-values, for a given attribute, seen in
# the neighborhood (e.g., the average weight among entities in the neighborhood)
min.class=netkit.classifiers.aggregators.Min
min.accept=CONTINUOUS,DISCRETE

# ==============================
# MODE(Attribute)
# ==============================
# This aggregator returns the most often seen attribute-values, for a given attribute, seen in
# the neighborhood (e.g., the most common eye-color among entities in the neighborhood)
# it uses a weighted count when there is uncertainty (much like the weighted-vote RN)
mode.class=netkit.classifiers.aggregators.Mode
mode.accept=CATEGORICAL,DISCRETE

# ==============================
# RATIO(Attribute, Value)
# ==============================
# This is a by-value aggregation.   e.g., it aggregates/discrete a categorical attribute, and a specific
# value (e.g., "what is the ratio of entities in the neighborhood have the value 'blue' in the
# eye-color attribute)
# it uses a weighted count when there is uncertainty (much like the weighted-vote RN)
ratio.class=netkit.classifiers.aggregators.Ratio
ratio.accept=CATEGORICAL,DISCRETE

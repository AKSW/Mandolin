# rclassifier.properties
# Copyright (C) 2008 Sofus A. Macskassy
#
# Part of the open-source Network Learning Toolkit
# http://netkit-srl.sourceforge.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id$
#
# ================================================================================
#
# Relational/Network Classifier methods.
#
# Add your new relational/network classifier methods in this file.
#
# Required lines:
#     <name>.class=[fully specified class name]
# Optional parameters (for subclasses of netkit.classifiers.relational.NetworkClassifierImp):
#     <name>.aggregation=[aggregation-type]   --- one of: All,None,ClassOnly,ExcludeClass (case-sensitive)
#     <name>.aggregators=[comma-delimited (no spaces) list based on names in 'aggregator.properties']
#     <name>.useintrinsic=[true/false]
# Default values for optionals:
#     <name>.aggregation=ClassOnly
#     <name>.aggregators=mode,ratio,mean
#     <name>.useintrinsic=true
#
# Each method has its own extra configuration parameters.
# You can specify more than one method with the same class but different configuration
# parameters, as long as they have different names.
#
# Implementation:
# Relational classifiers must implement the netkit.classifiers.relational.NetworkClassifier interface.
# You can easily get started by subclassing netkit.classifiers.relational.NetworkClassifierImp core class.
# The method must have a default public constructor; configuration is done in the 'configure()'
# method.
#
# NOTE: The Network method is a wrapper for weka, and takes the following options:
#       Required parameter line:
#             <name>.classifier=[weka-classifier-name as given in 'weka.properties']
#       Optional parameter line:
#             <name>.options
#       Where this optional line takes the place of command-line functions you would give
#       the weka classifier.

# ===================================================
# Weighted Vote Relational Neighbor classifier (wvRN)
# ===================================================
# References:
#   * Sofus A. Macskassy, Foster Provost (2007)
#     Classification in Networked Data: A toolkit and a univariate case study
#     Journal of Machine Learning, 8(May):935-983, 2007
#
# This takes no parameters
wvrn.class=netkit.classifiers.relational.WeightedVoteRelationalNeighbor

# ===================================================
# Weighted Vote Relational Neighbor classifier (wvRN)
# ===================================================
# References:
#   * Sofus A. Macskassy, Foster Provost (2007)
#     Classification in Networked Data: A toolkit and a univariate case study
#     Journal of Machine Learning, 8(May):935-983, 2007
#
# This takes no parameters
rwvrn.class=netkit.classifiers.relational.WeightedVoteRelationalNeighbor
rwvrn.rfactor=1.0

# ===================================================
# Gaussian fields and harmonic functions
# ===================================================
# References:
#   * Zhu, X., Ghahramani, Z., & Lafferty, J. (2003).
#     Semi-supervised learning using Gaussian fields and harmonic functions.<BR>
#     The 20th International Conference on Machine Learning (ICML).
#
# This takes no parameters
harmonic.class=netkit.classifiers.relational.Harmonic

# ===================================================
# Probabilistic Relational Neighbor classifier (pRN)
# ===================================================
# References:
#   * Sofus A. Macskassy, Foster Provost (2004)
#     Classification in Networked Data: A toolkit and a univariate case study
#     CeDER Working Paper #CeDER-04-08, Stern School of Business, New York University
#
# This is a probabilistic version of wvRN - much like a
# network only bayes classifier with a static probabilistic
# model.   Where P(i=c|n) = 1 if n=c, otherwise epsilon(very small)
#
prn.class=netkit.classifiers.relational.ProbRelationalNeighbor

# ==========================================================
# Class Distributional Relational Neighbor classifier (cdRN)
# ==========================================================
# References:
#   * Sofus A. Macskassy, Foster Provost (2004)
#     Classification in Networked Data: A toolkit and a univariate case study
#     CeDER Working Paper #CeDER-04-08, Stern School of Business, New York University
#
# This replicates the network-only cdRN as described in
# the reference paper, as it does not use intrinsic values,
# uses only aggregates on the class attribute, cosine distance
# metric on the normalized counts of neighbors.
#
# cdRN required options:
#       <name>.distance=[name from 'distance.properties']
# cdRN default values:
#       <name>.distance=cosine
#       <name>.aggregation=ClassOnly
#       <name>.aggregators=ratio
#       <name>.useintrinsic=false
cdrn-norm-cos.class=netkit.classifiers.relational.ClassDistribRelNeighbor
cdrn-norm-cos.distance=cosine
cdrn-norm-cos.aggregators=ratio
cdrn-norm-cos.aggregation=ClassOnly
cdrn-norm-cos.useintrinsic=false

# A different configuration of the cdRN which is multinomial
# and uses more aggregators.
cdrn-cos.class=netkit.classifiers.relational.ClassDistribRelNeighbor
cdrn-cos.distance=cosine
cdrn-cos.aggregators=ratio,mean
cdrn-cos.aggregation=All
cdrn-cos.useintrinsic=true

# ==========================================================
# Network-only Bayes Classifier
# ==========================================================
# References:
#   * Soumen Chakrabarti, Byron Dom and Piotr Indyk (1998)
#     Enhanced Hypertext Categorization Using Hyperlinks,
#     SIGMOD, 1998
#   * Sofus A. Macskassy, Foster Provost (2007).
#     Classification in Networked Data: A toolkit and a univariate case study.
#     Journal of Machine Learning, 8(May):935-983, 2007.
#
# This replicates the network-only bayes as described in
# the univariate reference paper.  This classifier applies
# Markov Random Field techniques for dealing with uncertainty
# in neighborhood (and local) attribute values, and can
# therefore be used with Relaxation Labeling.   This is not
# the case for the Weka bayes classifier, where you would
# need the (pseudo-)certainty that is given by Iterative
# classification and Gibbs sampling.
#
# NOTE: This currently takes no parameters and builds a model
# only on the neighborhood class labels.
# This is equivalent to these parameters:
#       <name>.aggregation=ClassOnly
#       <name>.aggregators=??? (there is no current aggregation technique for uncertainy)
#       <name>.useintrinsic=false
nobayes.class=netkit.classifiers.relational.NetworkOnlyBayes

# ==========================================================
# Logistic Regression  (network only)
# ==========================================================
# References:
#   * Qing Lu and Lise Getoor (2003)
#     Link-Based Classification
#     International Conference on Machine Learning, ICML-2003
#   * Sofus A. Macskassy, Foster Provost (2004)
#     Classification in Networked Data: A toolkit and a univariate case study
#     CeDER Working Paper #CeDER-04-08, Stern School of Business, New York University
#
# The following replicates some of the relational
# classifiers described in the above paper.  They are
# network only in that they aggregate class only and
# do not use intrinsic values.

# use a vector consisting normalized count of neighbor class attributes
# (one value per possible value)
nolb-lr-distrib.class=netkit.classifiers.relational.NetworkWeka
nolb-lr-distrib.classifier=logistic
nolb-lr-distrib.useintrinsic=false
nolb-lr-distrib.aggregators=ratio
nolb-lr-distrib.aggregation=ClassOnly

# use the mode (most prominent value) of neighbor class attribute
nolb-lr-mode.class=netkit.classifiers.relational.NetworkWeka
nolb-lr-mode.classifier=logistic
nolb-lr-mode.useintrinsic=false
nolb-lr-mode.aggregators=mode
nolb-lr-mode.aggregation=ClassOnly

# use a vector consisting count of neighbor class attributes
# (one value per possible value)
nolb-lr-count.class=netkit.classifiers.relational.NetworkWeka
nolb-lr-count.classifier=logistic
nolb-lr-count.useintrinsic=false
nolb-lr-count.aggregators=count
nolb-lr-count.aggregation=ClassOnly

# use a vector consisting binary values of neighbor class attributes
# (one value per possible value)
nolb-lr-binary.class=netkit.classifiers.relational.NetworkWeka
nolb-lr-binary.classifier=logistic
nolb-lr-binary.useintrinsic=false
nolb-lr-binary.aggregators=exist
nolb-lr-binary.aggregation=ClassOnly

# ==============================
# LOGISTIC REGRESSION (Weka)
# ==============================
logistic.class=netkit.classifiers.relational.NetworkWeka
logistic.classifier=logistic

# ==============================
# NAIVE BAYES (Weka)
# ==============================
naivebayes.class=netkit.classifiers.relational.NetworkWeka
naivebayes.classifier=naivebayes

# ==============================
# j48 (Weka)
# ==============================
j48.class=netkit.classifiers.relational.NetworkWeka
j48.classifier=j48

# ==============================
# j48 (Weka)
# ==============================
j48all.class=netkit.classifiers.relational.NetworkWeka
j48all.classifier=j48
j48all.aggregation=All

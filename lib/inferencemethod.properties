# inferencemethod.properties
# Copyright (C) 2008 Sofus A. Macskassy
#
# Part of the open-source Network Learning Toolkit
# http://netkit-srl.sourceforge.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id$
#
# ================================================================================
#
# Collective Inference methods.
#
# Add your new collective inference methods in this file.
#
# Required lines:
#     <name>.class=[fully specified class name]
# Optional lines:
#     <name>.numit=##    --- the (max) number of iterations to run the collecitve inference method
#
# Each method have its own extra configuration parameters.
# You can specify more than one method with the same class but different configuration
# parameters, as long as they have different names.
#
# Implementation:
# Inference methods must subclass the netkit.inference.InferenceMethod abstract core class.
# They must have a default public constructor; configuration is done in the 'configure()'
# method.
#

# ==============================
# NULL
# ==============================
# null inference method.   does nothing.  only local classifier gets called
null.class=netkit.inference.NullInference

# ==============================
# Gibbs Sampling
# ==============================
# References:
#   * Stuart Geman and Donald Geman (1984)
#     Stochastic relaxation, Gibbs distributions and the Bayesian restoration of images
#     IEEE Transactions PAMI, 6, pp 721-741, 1984.
#
# gibbs sampling.
#    optional parameters:
#       numchains=#   --- number of markov chains to run
#       burnin=#      --- number of iterations needed for burnin
#                         after which it does another 'numit' iterations
#    defaults:
#       numit=2000
#       numchains=10
#       burnin=200
gibbs.class=netkit.inference.GibbsSampling

# ==============================
# Iterative Classification
# ==============================
# References:
#   * Jennifer Neville and David Jensen (2000)
#     Iterative Classification in Relational Data
#     AAAI Workshop on Learning Statistical Models from Relational Data, 13-20, 2000
#   * Qing Lu and Lise Getoor (2003)
#     Link-Based Classification
#     International Conference on Machine Learning, ICML-2003
#
# iterative classification.
#    defaults:
#       numit=1000
iterative.class=netkit.inference.IterativeClassification

# ==============================
# Relaxation Labeling
# ==============================
# References:
#   * Soumen Chakrabarti, Byron Dom and Piotr Indyk (1998)
#     Enhanced Hypertext Categorization Using Hyperlinks,
#     SIGMOD, 1998
#
# relaxation labeling (with simulated annealing)
#    optional parameters:
#       beta=#       --- initial weight for keeping current prior
#       decay=#      --- the factor by which to decrease 'beta' at
#                        each iteration:  beta(K+1)=beta(K)*decay
#    defaults:
#       numit=99
#       beta=1
#       decay=0.99
relaxlabel.class=netkit.inference.RelaxationLabeling
relaxlabel.numit=99
relaxlabel.beta=1.00
relaxlabel.decay=0.99
